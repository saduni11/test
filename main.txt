// ICA-Q1.cpp
#include <stdio.h>
#include <omp.h>

int main() {
    const int n = 12;
    int arr[n] = { 5, 17, 9, 23, 4, 11, 42, 8, 30, 16, 2, 19 };

    // 1. Manual work distribution using thread IDs
    #pragma omp parallel
    {
        int tid = omp_get_thread_num();
        int nthreads = omp_get_num_threads();

        for (int i = tid; i < n; i += nthreads) {
            if (arr[i] % 2 == 0)
                printf("Thread %d: arr[%d] = %d is Even\n", tid, i, arr[i]);
            else
                printf("Thread %d: arr[%d] = %d is Odd\n", tid, i, arr[i]);
        }
    }

    printf("\n");

    // 2. Using parallel for to divide the loop automatically
    #pragma omp parallel for
    for (int i = 0; i < n; i++) {
        int tid = omp_get_thread_num();
        if (arr[i] % 2 == 0)
            printf("Thread %d: arr[%d] = %d is Even\n", tid, i, arr[i]);
        else
            printf("Thread %d: arr[%d] = %d is Odd\n", tid, i, arr[i]);
    }

    return 0;
}
--------------------------------------------------------------------------------------
// ICA2-Q2.cpp
#include <stdio.h>
#include <omp.h>

int main() {
    const int n = 10000;
    int visitors[n];
    double total = 0.0, avg = 0.0;

    for (int i = 0; i < n; i++)
        visitors[i] = (i % 100) + 50;

    double start = omp_get_wtime();

    #pragma omp parallel for reduction(+:total)
    for (int i = 0; i < n; i++) {
        total += visitors[i];
    }

    avg = total / n;

    double end = omp_get_wtime();

    printf("Total visitors across all websites: %.0f\n", total);
    printf("Average visitors per website: %.2f\n", avg);
    printf("Execution time: %.6f seconds\n", end - start);

    return 0;
}
---------------------------------------------------------------------------
// ICA-3.cpp
#include <stdio.h>
#include <omp.h>

int main() {
    const int n = 100000;
    int A[n], B[n];
    int pass_count = 0;

    for (int i = 0; i < n; i++) {
        A[i] = i % 100;
        B[i] = (i * 3) % 100;
    }

    double start = omp_get_wtime();

    #pragma omp parallel for reduction(+:pass_count)
    for (int i = 0; i < n; i++) {
        double avg = (A[i] + B[i]) / 2.0;
        if (avg >= 50)
            pass_count++;
    }

    double end = omp_get_wtime();

    printf("Number of students passed: %d / %d\n", pass_count, n);
    printf("Execution time: %.6f seconds\n", end - start);

    return 0;
}

